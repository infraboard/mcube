package enum

const tmp = `// Code generated by github.com/infraboard/mcube/v2 
// DO NOT EDIT

package {{.PKG}}

import (
	"bytes"
	"fmt"
	"strings"
)

{{- range .Enums.Items }}
{{ if $.ValueMap }}
var (
	// {{.Name}}_name name map
	{{.Name}}_name = map[{{.Name}}]string{
{{- range .Items }}
	{{.Name}}: "{{.Show}}",
{{- end}}
	}

	// {{.Name}}_value value map
	{{.Name}}_value = map[string]{{.Name}}{
{{- range .Items }}
		"{{.Show}}": {{.Name}},
{{- end}}
	}
)
{{end}}

// Parse{{.Name}}FromString Parse {{.Name}} from string
func Parse{{.Name}}FromString(str string) ({{.Name}}, error) {
	key := strings.Trim(string(str), {{$.Backquote}}"{{$.Backquote}})
	v, ok := {{.Name}}_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown {{.Name}}: %s", str)
	}

	return {{.Name}}(v), nil
}

// Equal type compare
func (t {{.Name}}) Equal(target {{.Name}}) bool {
	return t == target
}

// IsIn todo
func (t {{.Name}}) IsIn(targets ...{{.Name}}) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

{{ if $.Stringer }}
// String stringer
func (t {{.Name}}) String() string {
	v, ok := {{.Name}}_name[t]
	if !ok {
		return "unknown"
	}

	return v
}
{{end}}

{{ if $.Marshal }}
// MarshalJSON todo
func (t {{.Name}}) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString({{$.Backquote}}"{{$.Backquote}})
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString({{$.Backquote}}"{{$.Backquote}})
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *{{.Name}}) UnmarshalJSON(b []byte) error {
	ins, err := Parse{{.Name}}FromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
{{end}}
{{- end}}`
